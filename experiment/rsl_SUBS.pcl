include "rsl_INFO.pcl";

## INPUT
sub string GetInput(string prompt) begin
	# Get keyboard input from user
	#
	# INPUTS:
	#		string prompt	-	A prompt
	#
	# OUTPUTS:
	#		string input	-	User input
	
	t_Text.set_caption(prompt, true);
	t_Text2.set_caption("", true);
	p_Text.present();
	system_keyboard.set_case_mode(3);
	string in = system_keyboard.get_input(p_Text, t_Text2);
	return in;
end;

sub ClearText begin
	# Clears text on screen
	
	t_Text.set_caption("", true);
	t_Text2.set_caption("", true);
	t_2AFC_left.set_caption("", true);
	t_2AFC_right.set_caption("", true);
	t_MEG_top.set_caption("", true);
	t_MEG_left.set_caption("", true);
	t_MEG_right.set_caption("", true);
	t_4AFC_1_top_left.set_caption("", true);
	t_4AFC_2_bottom_left.set_caption("", true);
	t_4AFC_3_top_right.set_caption("", true);
	t_4AFC_4_bottom_right.set_caption("", true);
end;

sub GetParticipantID begin
	# Gets participant ID via user prompt
	
	s_PPN = GetInput(s_ParticipantID);
	ClearText();
end;

sub WaitForKey begin
	# Pause experiment until key is pressed
	
	loop i_ButtonPresses = response_manager.total_response_count() until response_manager.total_response_count() > i_ButtonPresses
   begin
	end;
end;

sub int WaitForKeyTimed(int max) begin
	# Wait for participant to choose a key or until max time runs out
	#
	# INPUTS:
	#		int max		-	Maximum reaction time
	#
	# OUTPUTS:
	#		int delta	-	Reaction time (or -1 if timeout)
	
	int tn = clock.time();
	int delta = 0;
	
	loop i_ButtonPresses = response_manager.total_response_count() until response_manager.total_response_count() > i_ButtonPresses begin
		delta = clock.time() - tn;
		if delta > max then
			return -1;
			break;
		end;
	end;
	
	return delta;
end;

sub int WaitForBITSIInput(input_port& Serial) begin
	# Poll BITSI states until button press
	#
	# INPUTS:
	#		input_port& Serial	-	Reference to the BITSI input port
	#
	# OUTPUTS:
	#		int Code					-	Integer ASCII code from BITSI
	
	loop until Serial.new_code_count() > 0
	begin
	end;
	
	return Serial.last_code();
end;

sub array<int, 1> WaitForBITSIInputTimed(input_port& Serial, int start, int max) begin
	# Poll BITSI states until button press or time out
	#
	# INPUTS:
	#		input_port& Serial	-	Reference to the BITSI input port
	#		int start				-	Start of waiting time
	#		int max					-	Maximum waiting time
	#
	# OUTPUTS:
	#		int resp					-	[1] BITSI code, [2] delta
	
	array<int> resp[2];
	resp[1] = -1;
	resp[2] = max;
	
	loop until Serial.new_code_count() > 0
	begin
		delta = clock.time() - start;
		if delta > max then
			return resp;
			break;
		end;
	end;
	
	resp[1] = Serial.last_code();
	resp[2] = delta;
	
	return resp;
end;

sub bool IsValidButton(int code) begin
	# Check input code against allowed codes from BITSI
	#
	# INPUTS:
	#		int code		-	Input code
	#
	# OUTPUTS:
	#		bool valid	-	Is input allowed?
	
	loop int allowed_code = 1 until allowed_code > ai_MEG_Buttons.count() begin
		if code == ai_MEG_Buttons[allowed_code] then
			return true;
		end;
	end;
	
	return false;
end;


sub int WaitForBITSIButton(input_port& Serial) begin
	# Pause experiment until 1 valid BITSI button press is received
	#
	# INPUTS:
	#		input_port& Serial	-	Reference to the BITSI input port
	#
	# OUTPUTS:
	#		int code					-	Integer ASCII code from BITSI
	
	loop int code = WaitForBITSIInput(Serial) until false
	begin
		if IsValidButton(code) == true then
			return code;
		end;
	end;
	
	return -1;
end;

sub array<int, 1> WaitForBITSIButtonTimed(input_port& Serial, int max) begin
	# Pause experiment until a valid BITSI button press is received
	#
	# INPUTS:
	#		input_port& Serial	-	Reference to the BITSI input port
	#		int max					-	Maximum reaction time
	#
	# OUTPUTS:
	#		array<int, 1> resp	-	[1] BITSI code, [2] delta
	
	array<int> resp[2];
	resp[1] = -1;
	resp[2] = max;
	int start = clock.time();
	
	loop resp = WaitForBITSIInputTimed(Serial, start, max) until false
	begin
		if resp[1] > 0 then
			if IsValidButton(resp[1]) == true then
				return resp;
			end;
		else
			resp[1] = -1;
			resp[2] = max;
			return resp;
		end;
	end;
	
	return resp;
end;

sub InstructParticipant(string message) begin
	# Show participants a text description
	#
	# INPUTS:
	#		string message	-	A description to present to participants

	ClearText();
	t_Text2.set_caption(message, true);
	p_Text.present();
	WaitForKey();
	ClearText();
end;

sub InstructParticipantBITSI(string message, input_port& Serial) begin
	# Show participants a text description that with BITSI buttons
	#
	# INPUTS:
	#		string message			-	A description to present to participants
	#		input_port& Serial	-	Reference to the BITSI input port
	
	ClearText();
	t_Text2.set_caption(message, true);
	p_Text.present();
	WaitForBITSIButton(Serial);
	ClearText();
end;

## STIMULI
sub LoadSpeakers begin
	# Loads the hardcoded speaker text file
	
	input_file f = new input_file;
	f.open(s_Dir_Info + s_List_Speakers);
	f.set_delimiter('\n');
	
	string header = f.get_line();
	
	loop i = 1 until f.end_of_file() || !f.last_succeeded() begin
		string l = f.get_line();
		array<string> spkr[2];
		l.split("\t", spkr);
		as_Speakers[i] = spkr[2];
		i = i + 1;
	end;
	
	f.close();
end;

sub LoadDefinitions begin
	# Loads the hardcoded definition text file
	
	input_file f = new input_file;
	f.open(s_Dir_Info + s_List_Definitions);
	f.set_delimiter('\n');
	
	string header = f.get_line();
	
	loop i = 1 until f.end_of_file() || !f.last_succeeded() begin
		string l = f.get_line();
		l.split("\t", as_Definitions[i]);
		i = i + 1;
	end;
	
	f.close();
end;

sub LoadFillers begin
	# Loads the hardcoded fillers text file
	
	input_file f = new input_file;
	f.open(s_Dir_Info + s_List_Fillers);
	f.set_delimiter('\n');
	
	string header = f.get_line();
	
	loop i = 1 until f.end_of_file() || !f.last_succeeded() begin
		string l = f.get_line();
		l.split("\t", as_Fillers[i]);
		i = i + 1;
	end;
	
	f.close();
end;

sub LoadStimuli(string file, array<string, 2>& stimuli, int c) begin
	# Loads a list of stimuli
	#
	# INPUTS:
	#		array<string, 2>& stimuli	-	The preassigned stimulus array we want to target
	#		int columns						-	Integer count of the columns we need
	#
	# OUTPUTS:
	#		none,
	#			but mind the reference. This updates input stimuli.
	
	input_file f = new input_file;
	f.open(s_Dir_Txt + file);
	f.set_delimiter('\n');
	
	string header = f.get_line();
	
	loop i = 1 until f.end_of_file() || !f.last_succeeded() begin
		string l = f.get_line();
		
		array<string> entry[c-1];
		l.split("\t", entry);
		int spkr = int(entry[3]);
		
		array<string> full[c]; # presentation is so inelegant... why is there no way to index properly (or to at least do a memory referencing trick here)? good grief. (or maybe i just don't know enough about it but the docs are also very...meh)
		full[1] = entry[1];
		full[2] = entry[2];
		full[3] = entry[3];
		full[4] = entry[4];
		full[5] = entry[5];
		full[6] = entry[6];
		full[7] = entry[7];
		full[8] = entry[8];
		full[9] = as_Speakers[spkr];
		
		stimuli[i] = full;
		i = i + 1;
	end;
	
	f.close();
end;

sub ShuffleBlocked(array<string, 2>& stimuli, int v, int r, int c) begin
	# Shuffles a list of stimuli that has consecutive variants
	#
	# INPUTS:
	#		array<string, 2>& stimuli	-	The preassigned stimulus array we want to target
	#		int variants					-	The number of variants we have per stimulus
	#		int rows							-	The number of rows of our stimuli
	#		int columns						-	The number of columns of our stimuli
	#
	# OUTPUTS:
	#		none,
	#			but mind the reference. This updates input stimuli.
	
	array<string> bin[v][int(r/v)][c];
	array<int> counts[v];
	counts.fill(1, v, 1, 0);
	
	int j = 1;
	
	loop i = 1 until i > r begin
		if j > 4 then
			j = 1;
		end;
		
		int b_var = j;
		int b_num = counts[b_var];
		
		bin[b_var][b_num] = stimuli[i];
		
		counts[b_var] = counts[b_var] + 1;
		i = i + 1;
		j = j + 1;
	end;
	
	array<string> collection[r][c];
	
	loop i = 1 until i > v begin
		bin[i].shuffle();
		
		loop j = 1 until j > int(r/v) begin
			collection[(i - 1) * int(r/v) + j] = bin[i][j];
			
			j = j + 1;
		end;
		
		i = i + 1;
	end;
	
	stimuli = collection;
end;

sub bool OptionsInclude(array<int, 1>& options, int target) begin
	# Helper function that looks if an alternative is present in an option array already.
	#
	# INPUTS:
	#		array<int, 1>& options	-	The options to scan
	#		int target					-	The target to scan for
	#
	# OUTPUTS:
	#		bool in_array				-	True if target exists in array
	
	int j = 1;
	
	loop j = 1 until j > options.count() begin
		if options[j] == target then
			return true;
		end;
		j = j + 1;
	end;
	
	return false;
end;

sub SampleAlternatives(array<string, 2>& stimuli, array<int, 2>& alternatives, int n, int s, bool include_none, bool include_real) begin
	# Curate a list of s alternatives for n stimuli
	#
	# INPUTS:
	#		array<string, 2>& stimuli			-	The assigned and shuffled stimulus array
	#		array<string, 2>& alternatives	-	The preassigned alternative array we want to target
	#		int n										-	The number of stimuli we want alternatives for
	#		int s										-	The number of alternatives we want per stimulus
	#		bool include_none						-	If true, we include the 'None of these' answer as a potential alternative
	#		bool include_real						-  If true, we include real defintiions in the pool we draw from.
	#
	# OUTPUTS:
	#		none,
	#			but mind the reference. This updates input alternatives array
	
	int i_Total = i_Definition_R + i_Fillers_R;
	
	loop i = 1 until i > n begin
		array<int> collection[s];
		
		loop k = 1 until k > s begin
			int choice;
			
			if include_none == true && include_real == true then
				loop choice = random(1, i_Total) until !OptionsInclude(collection, choice) && choice != int(stimuli[i][8]) begin
					choice = random(1, i_Total);
				end;
			elseif include_none == true && include_real == false then
				loop choice = random(1 + i_Definition_R, i_Total) until !OptionsInclude(collection, choice) && choice != int(stimuli[i][8]) begin
					choice = random(1 + i_Definition_R, i_Total);
				end;
			elseif include_none == false && include_real == true then
				loop choice = random(1, i_Total) until !OptionsInclude(collection, choice) && choice != int(stimuli[i][8]) && choice != i_Filler_None begin
					choice = random(1, i_Total);
				end;
			else
				loop choice = random(1 + i_Definition_R, i_Total) until !OptionsInclude(collection, choice) && choice != int(stimuli[i][8]) && choice != i_Filler_None begin
					choice = random(1 + i_Definition_R, i_Total);
				end;
			end;
			
			collection[k] = choice;
			
			k = k + 1;
		end;
		
		alternatives[i] = collection;
		
		i = i + 1;
	end;
end;

sub SampleAlternativesAudio(array<string, 2>& stimuli, array<string, 2>& alternatives, int n, int s) begin
	# Curate a list of n alternative audio stimuli
	#
	# INPUTS:
	#		array<string, 2>& stimuli			-	The assigned and shuffled stimulus array
	#		array<string, 2>& alternatives	-	The preassigned alternative array we want to target
	#		int n										-	The number of trials we need an alternative for
	#		int s										-	Maximum sample range
	#
	# OUTPUTS:
	#		none,
	#			but mind the reference. This updates input alternatives array
	
	loop i = 1 until i > n begin
		int choice;
		
		loop choice = random(1, s) until stimuli[i][2] != stimuli[choice][2] begin
			choice = random(1, s);
		end;
		
		alternatives[i][1] = stimuli[choice][2];
		alternatives[i][2] = stimuli[choice][3];
		alternatives[i][3] = stimuli[choice][1];
		alternatives[i][4] = stimuli[choice][4];
		alternatives[i][5] = stimuli[choice][5];
		
		i = i + 1;
	end;
end;

sub string GetDefinitionShort(int target) begin
	# Returns the short definition for target definition id
	#
	# INPUTS:
	#		int target	-	Target definition
	#
	# OUTPUTS:
	#		string def	-	The corresponding short definition string
	
	string d;
	
	if target > i_Definition_R then
		d = as_Fillers[target - i_Definition_R][2];
	else
		d = as_Definitions[target][3];
	end;
	
	return d;
end;

## DATA
sub BeginDataStream(string file, string header) begin
	# Creates a save file for current session
	#
	# INPUTS:
	#		string file		-	Name of file that should be created for this session
	#		string header	-	Header that we need for this file
	
	output_file f = new output_file;
	f.open(file, false);
	f.print(header);
	f.close();
end;

sub SaveData(string file, array<string, 1> data) begin
	# Saves data to precreated session file
	#
	# INPUTS:
	#		string file					-	Name of file where data are stored
	#		array<string, 1> data	-	Data struct to be saved as one line in that file
	
	output_file f = new output_file;
	f.open_append(file);
	
	string outs = "";
	
	int j;
	loop j = 1 until j > data.count() begin
		outs = outs + data[j];
		if j == data.count() then
			outs = outs + "\n";
		else
			outs = outs + "\t";
		end;
		j = j + 1;
	end;
	
	f.print(outs);
	f.close();
end;

## TRIALS
sub RunExposureTrials begin
	# Presentation of the exposure trials
	
	loop i = 1 until i > i_Expo_Trials_N begin
		int off = random(1, i_Expo_Delay);
		
		w_Sound.unload();
		w_Sound.set_filename(s_Dir_Audio + as_Expo_Stimuli[i][5]);
		w_Sound.load();
		
		ClearText();
		
		p_Blank.present();
		p_Fixation.present();
		wait_interval(i_Expo_Fixation);
		
		p_Blank.present();
		s_Sound.present();
		#wait_interval(int(as_Expo_Stimuli[i][4]) + i_Expo_Delay);
		wait_interval(i_Expo_Audio + i_Expo_Delay - off);
		
		t_Text.set_caption(as_Definitions[int(as_Expo_Stimuli[i][8])][2], true);
		t_Text2.set_caption("", true);
		p_Text.present();
		wait_interval(i_Expo_Definition);
		
		p_Blank.present();
		ClearText();
		
		#int ITI = i_Expo_ITI;
		#if int(as_Expo_Stimuli[i][4]) > i_Expo_Audio then
		#	ITI = ITI - (int(as_Expo_Stimuli[i][4]) - i_Expo_Audio);
		#end;
		#wait_interval(ITI);
		wait_interval(i_Expo_ITI + off);
		
		
		i = i + 1;
	end;
end;

sub Run2AFCDTrials begin
	# Presentation of the 2AFC trials, cued by definition
	
	string f_save = s_Dir_Data + s_PPN + s_Outs_2AFCD;
	BeginDataStream(f_save, "spkr\tid\tvar\tdur\tf\tpool\tlist\tdef\ts\tf_spkr\tf_id\tf_var\tf_dur\tcor\trt\ti\n");
	
	i_Total_Correct = 0;
	
	response_manager.set_button_active(1, false);
	
	loop i = 1 until i > i_2AFCD_Trials_N begin
		w_Sound.unload();
		w_Sound.set_filename(s_Dir_Audio + as_2AFCD_Stimuli[i][5]);
		w_Sound.load();
		w_Sound2.unload();
		w_Sound2.set_filename(s_Dir_Audio + as_2AFCD_Alternatives[i][5]);
		w_Sound2.load();
		
		array<int> options[2] = {1, 2};
		options.shuffle();
		
		ClearText();
		
		p_Blank.present();
		p_Fixation.present();
		wait_interval(i_2AFCD_Fixation);
		
		p_Blank.present();
		wait_interval(i_2AFCD_Delay);
		
		t_Text.set_caption(GetDefinitionShort(int(as_2AFCD_Stimuli[i][8])), true);
		t_Text2.set_caption("", true);
		p_Text.present();
		wait_interval(i_2AFCD_Visual);
		
		p_Blank.present();
		#wait_interval(i_2AFCD_Offset);
		
		ClearText();
		t_Text.set_caption("1", true);
		t_Text2.set_caption("", true);
		p_Text.present();
		

		if options[1] == 1 then
			s_Sound.present();
			wait_interval(int(as_2AFCD_Stimuli[i][4]));
		else
			s_Sound2.present();
			wait_interval(int(as_2AFCD_Alternatives[i][4]));
		end;
		
		ClearText();
		p_Blank.present();
		wait_interval(i_2AFCD_Middle);
		
		t_Text.set_caption("2", true);
		t_Text2.set_caption("", true);
		p_Text.present();
		
		if options[1] == 1 then
			s_Sound2.present();
			wait_interval(int(as_2AFCD_Alternatives[i][4]));
		else
			s_Sound.present();
			wait_interval(int(as_2AFCD_Stimuli[i][4]));
		end;
		
		ClearText();
		p_Blank.present();
		#wait_interval(i_2AFCD_Offset);
		
		t_2AFC_left.set_caption("1", true);
		t_2AFC_right.set_caption("2", true);
		p_2AFC.present();
		
		int delta = WaitForKeyTimed(i_2AFCD_Choice);
		int resp = -1;
		int correct = 0;
		
		if delta > 0 then
			resp = response_manager.last_response();
		else
			delta = i_2AFCD_Choice;
		end;
		
		if resp == 2 && options[1] == 1 then				# left key pressed, left correct ==> success
			correct = 1;
			b_2AFC.set_color(0, 255, 0);
			t_2AFC_left.set_font_color(0, 255, 0);
		elseif resp == 2 && options[1] == 2 then			# left key pressed, left incorrect ==> failure
			b_2AFC.set_color(255, 0, 0);
			t_2AFC_left.set_font_color(255, 0, 0);
		elseif resp == 3 && options[1] == 1 then			# right key pressed, right incorrect ==> failure
			b_2AFC.set_color(255, 0, 0);
			t_2AFC_right.set_font_color(255, 0, 0);
		elseif resp == 3 && options[1] == 2 then			# right key pressed, right correct ==> success
			correct = 1;
			b_2AFC.set_color(0, 255, 0);
			t_2AFC_right.set_font_color(0, 255, 0);
		else
			b_2AFC.set_color(255, 0, 0);
			
			if options[1] == 1 then								# no key pressed, left option correct
				t_2AFC_left.set_font_color(0, 255, 0);
			else														# no key pressed, right option correct
				t_2AFC_right.set_font_color(0, 255, 0);
			end;
		end;
		
		t_2AFC_left.redraw();
		t_2AFC_right.redraw();
		p_2AFC.present();
		wait_interval(i_2AFCD_Feedback);
		
		ClearText();
		
		t_2AFC_left.set_font_color(255, 255, 255);
		t_2AFC_right.set_font_color(255, 255, 255);
		t_2AFC_left.redraw();
		t_2AFC_right.redraw();
		b_2AFC.set_color(255, 255, 255);
		p_Blank.present();
		
		array<string> data[16];
		data[1] = as_2AFCD_Stimuli[i][2];
		data[2] = as_2AFCD_Stimuli[i][3];
		data[3] = as_2AFCD_Stimuli[i][1];
		data[4] = as_2AFCD_Stimuli[i][4];
		data[5] = as_2AFCD_Stimuli[i][5];
		data[6] = as_2AFCD_Stimuli[i][6];
		data[7] = as_2AFCD_Stimuli[i][7];
		data[8] = as_2AFCD_Stimuli[i][8];
		data[9] = as_2AFCD_Stimuli[i][9];
		data[10] = as_2AFCD_Alternatives[i][1];
		data[11] = as_2AFCD_Alternatives[i][2];
		data[12] = as_2AFCD_Alternatives[i][3];
		data[13] = as_2AFCD_Alternatives[i][4];
		data[14] = string(correct);
		data[15] = string(delta);
		data[16] = string(i);
		SaveData(f_save, data);
		
		i_Total_Correct = i_Total_Correct + correct;
		
		int ITI = i_2AFCD_ITI;
		if int(as_2AFCD_Stimuli[i][4]) + int(as_2AFCD_Alternatives[i][4]) + i_2AFCD_Middle > i_2AFCD_Audio then
			ITI = ITI - (int(as_2AFCD_Stimuli[i][4]) + int(as_2AFCD_Alternatives[i][4]) + i_2AFCD_Middle - i_2AFCD_Audio);
			if ITI < 250 then
				ITI = 250;
			end;
		end;
		wait_interval(ITI);
		
		i = i + 1;
	end;
	
	response_manager.set_button_active(1, true);
end;

sub Run2AFCWTrials begin
	# Presentation of the 2AFC trials, cued by word
	
	string f_save = s_Dir_Data + s_PPN + s_Outs_2AFCW;
	BeginDataStream(f_save, "spkr\tid\tvar\tdur\tf\tpool\tlist\tdef\ts\tfil\tcor\trt\ti\n");
	
	i_Total_Correct = 0;
	
	response_manager.set_button_active(1, false);
	
	loop i = 1 until i > i_2AFCD_Trials_N begin
		w_Sound.unload();
		w_Sound.set_filename(s_Dir_Audio + as_2AFCW_Stimuli[i][5]);
		w_Sound.load();
		
		int answer_expected = int(as_2AFCW_Stimuli[i][8]);
		array<int> options[2];
		options[1] = answer_expected;
		options[2] = ai_2AFCW_Alternatives[i][1];
		options.shuffle();
		int answer_left = options[1];
		int answer_right = options[2];
		
		ClearText();
		
		p_Blank.present();
		p_Fixation.present();
		wait_interval(i_2AFCW_Fixation);
		
		p_Blank.present();
		s_Sound.present();
		wait_interval(int(as_2AFCW_Stimuli[i][4]) + i_2AFCW_Delay);
		
		t_2AFC_left.set_caption(GetDefinitionShort(answer_left), true);
		t_2AFC_right.set_caption(GetDefinitionShort(answer_right), true);
		p_2AFC.present();
		
		int delta = WaitForKeyTimed(i_2AFCW_Visual);
		int resp = -1;
		int correct = 0;
		
		if delta > 0 then
			resp = response_manager.last_response();
		else
			delta = i_2AFCW_Visual;
		end;
		
		if resp == 2 && answer_left == answer_expected then
			correct = 1;
			b_2AFC.set_color(0, 255, 0);
			t_2AFC_left.set_font_color(0, 255, 0);
		elseif resp == 2 && answer_right == answer_expected then
			b_2AFC.set_color(255, 0, 0);
			t_2AFC_left.set_font_color(255, 0, 0);
		elseif resp == 3 && answer_right == answer_expected then
			correct = 1;
			b_2AFC.set_color(0, 255, 0);
			t_2AFC_right.set_font_color(0, 255, 0);
		elseif resp == 3 && answer_left == answer_expected then
			b_2AFC.set_color(255, 0, 0);
			t_2AFC_right.set_font_color(255, 0, 0);
		else
			b_2AFC.set_color(255, 0, 0);
			
			if answer_left == answer_expected then
				t_2AFC_left.set_font_color(0, 255, 0);
			else
				t_2AFC_right.set_font_color(0, 255, 0);
			end;
		end;
		
		t_2AFC_left.redraw();
		t_2AFC_right.redraw();
		p_2AFC.present();
		wait_interval(i_2AFCW_Feedback);
		
		ClearText();
		
		t_2AFC_left.set_font_color(255, 255, 255);
		t_2AFC_right.set_font_color(255, 255, 255);
		t_2AFC_left.redraw();
		t_2AFC_right.redraw();
		b_2AFC.set_color(255, 255, 255);
		p_Blank.present();
		
		array<string> data[13];
		data[1] = as_2AFCW_Stimuli[i][2];
		data[2] = as_2AFCW_Stimuli[i][3];
		data[3] = as_2AFCW_Stimuli[i][1];
		data[4] = as_2AFCW_Stimuli[i][4];
		data[5] = as_2AFCW_Stimuli[i][5];
		data[6] = as_2AFCW_Stimuli[i][6];
		data[7] = as_2AFCW_Stimuli[i][7];
		data[8] = as_2AFCW_Stimuli[i][8];
		data[9] = as_2AFCW_Stimuli[i][9];
		data[10] = string(ai_2AFCW_Alternatives[i][1]);
		data[11] = string(correct);
		data[12] = string(delta);
		data[13] = string(i);
		SaveData(f_save, data);
		
		i_Total_Correct = i_Total_Correct + correct;
		
		int ITI = i_2AFCW_ITI;
		if int(as_2AFCW_Stimuli[i][4]) > i_2AFCW_Audio then
			ITI = ITI - (int(as_2AFCW_Stimuli[i][4]) - i_2AFCW_Audio)
		end;
		wait_interval(ITI);
		
		i = i + 1;
	end;
	
	response_manager.set_button_active(1, true);
end;

sub RunCRTrials begin
	# Presentation of the cued recall trials
	
	loop i = 1 until i > i_CR_Trials_N begin
		w_Sound.unload();
		w_Sound.set_filename(s_Dir_Audio + as_CR_Stimuli[i][5]);
		w_Sound.load();
		
		ClearText();
		
		p_Blank.present();
		p_Fixation.present();
		wait_interval(i_CR_Fixation);
		
		p_Blank.present();
		
		t_Text.set_caption(GetDefinitionShort(int(as_CR_Stimuli[i][8])), true);
		t_Text2.set_caption("", true);
		p_Text.present();
		wait_interval(i_CR_Prompt);
		
		ClearText();
		p_Blank.present();
		wait_interval(i_CR_Padding);
		
		t_Text.set_caption(GetDefinitionShort(int(as_CR_Stimuli[i][8])), true);
		t_Text2.set_caption("", true);
		t_Text.set_font_color(0, 255, 0);
		t_Text.redraw();
		p_Text.present();
		s_Sound.present();
		wait_interval(int(as_CR_Stimuli[i][4]));
		
		ClearText();
		t_Text.set_font_color(255, 255, 255);
		t_Text.redraw();
		p_Blank.present();
		
		int ITI = i_CR_ITI;
		if int(as_CR_Stimuli[i][4]) > i_CR_Audio then
			ITI = ITI - (int(as_CR_Stimuli[i][4]) - i_CR_Audio);
			
			if ITI < 500 then
				ITI = 500;
			end;
		end;
		wait_interval(ITI);
		
		i = i + 1;
	end;
end;

sub int RecodeBITSIResponse(int code) begin
	# Recode ASCII codes from BITSI to 1 or 2
	# 
	# INPUTS:
	#		int code		-	Valid BITSI code
	#
	# OUTPUTS:
	#		int option	-	1 v 2 for left (no) v right (yes)
	
	if code < 0 then
		return -1;
	end;
	
	if OptionsInclude(ai_MEG_Buttons_No, code) then
		return 1;
	end;
	
	return 2;
end;

sub int CodeOnsetTrigger(int p, int l) begin
	# Codes the trigger for our condition where:
	#
	#		pool
	#	l	1	2	3
	#	i	4	5	6
	#	s	7	8	9
	#	t
	# 
	# INPUTS:
	#		int p		-	Pool
	#		int l 	-	List
	#
	# OUTPUTS:
	#		int c		-	Code
	
	return (l - 1) * 3 + p; # range 1-9 for c E M_ij
end;

sub RunMEGTrials(input_port& Serial, output_port& Port) begin
	# Presentation of the MEG task
	# @TODO: Trigger data
	
	string f_save = s_Dir_Data + s_PPN + s_Outs_MEG;
	BeginDataStream(f_save, "id\tspkr\tvar\tdur\tf\tpool\tlist\tdef\ts\tt\trt\tr\tc\ti\n");
	
	Port.send_code(100); # CODE 100: MEG start
	wait_interval(200);
	
	loop i = 1 until i > i_MEG_Trials_N begin
		int l = int(as_MEG_Stimuli[i][7]);
		int p = int(as_MEG_Stimuli[i][6]);
		
		# this is a bit frustrating because we cannot
		# really code all the information we would
		# in an ideal world send in 8 bits but
		# it's really not that important; the main
		# thing to send here is condition and that
		# we're doing right now
		Port.send_code(pow(2, 4)); # CODE 2^4: trial start
		wait_interval(pow(2, 4));
		Port.send_code(CodeOnsetTrigger(p, l));
		
		w_Sound.unload();
		w_Sound.set_filename(s_Dir_Audio + as_MEG_Stimuli[i][5]);
		w_Sound.load();
		
		int type = random(1, as_MEG_Prompts.count());
		
		ClearText();
		
		p_Blank.present();
		p_Fixation.present();
		wait_interval(i_MEG_Fixation);
		
		p_Blank.present();
		s_Sound.present();
		Port.send_code(pow(2, 5)); # CODE 2^5: audio onset
		wait_interval(int(as_MEG_Stimuli[i][4]) + i_MEG_Delay);
		
		t_MEG_top.set_caption(as_MEG_Prompts[type], true);
		t_MEG_left.set_caption(s_MEG_Prompt_N, true);
		t_MEG_right.set_caption(s_MEG_Prompt_Y, true);
		p_MEG.present();
		Port.send_code(pow(2, 6)); # CODE 2^6: audio offset/response onset
		
		array<int> R[2] = WaitForBITSIButtonTimed(Serial, i_MEG_Response);
		Port.send_code(pow(2, 7)); # CODE 2^7: response offset
		int delta = R[2];
		int resp = RecodeBITSIResponse(R[1]); # recode the respnose to 1 or 2; left or right
		int correct = 0;
		
		ClearText();
		p_Blank.present();
		
		if resp > 0 then
			int a = 3 + type;
			if (resp - 1) == int(as_Definitions[int(as_MEG_Stimuli[i][8])][a]) then
				correct = 1;
			end;
		end;
		
		array<string> data[14];
		data[1] = as_MEG_Stimuli[i][2];
		data[2] = as_MEG_Stimuli[i][3];
		data[3] = as_MEG_Stimuli[i][1];
		data[4] = as_MEG_Stimuli[i][4];
		data[5] = as_MEG_Stimuli[i][5];
		data[6] = as_MEG_Stimuli[i][6];
		data[7] = as_MEG_Stimuli[i][7];
		data[8] = as_MEG_Stimuli[i][8];
		data[9] = as_MEG_Stimuli[i][9];
		data[10] = string(type);
		data[11] = string(delta);
		data[12] = string(resp);
		data[13] = string(correct);
		data[14] = string(i);
		SaveData(f_save, data);
		
		wait_interval(i_MEG_ITI);
		
		i = i + 1;
	end;
	
	Port.send_code(200); # CODE 200: MEG end
	wait_interval(300);
end;

sub Run4AFCTrials begin
	# Presentation of the 4AFC task
	
	string f_save = s_Dir_Data + s_PPN + s_Outs_4AFC;
	BeginDataStream(f_save, "spkr\tid\tvar\tdur\tf\tpool\tlist\tdef\ts\to1\to2\to3\to4\tcor\tr\trt\ti\n");
	
	i_Total_Correct = 0;
	
	response_manager.set_button_active(1, false);
	
	loop i = 1 until i > i_4AFC_Trials_N begin
		w_Sound.unload();
		w_Sound.set_filename(s_Dir_Audio + as_4AFC_Stimuli[i][5]);
		w_Sound.load();
		
		int answer_expected = int(as_4AFC_Stimuli[i][8]);
		array<int> options[4];
		options[1] = answer_expected;
		options[2] = ai_4AFC_Alternatives[i][1];
		options[3] = ai_4AFC_Alternatives[i][2];
		options[4] = ai_4AFC_Alternatives[i][3];
		options.shuffle();
		
		ClearText();
		
		p_Blank.present();
		p_Fixation.present();
		wait_interval(i_4AFC_Fixation);
		
		p_Blank.present();
		s_Sound.present();
		wait_interval(int(as_4AFC_Stimuli[i][4]));
		
		t_4AFC_1_top_left.set_caption(GetDefinitionShort(options[1]), true);			# s
		t_4AFC_2_bottom_left.set_caption(GetDefinitionShort(options[2]), true);		# x
		t_4AFC_3_top_right.set_caption(GetDefinitionShort(options[3]), true);		# j
		t_4AFC_4_bottom_right.set_caption(GetDefinitionShort(options[4]), true);	# n
		p_4AFC.present();
		
		int delta = WaitForKeyTimed(i_4AFC_Visual);
		int resp = -1;
		int correct = 0;
		
		ClearText();
		p_Blank.present();
		
		if delta > 0 then
			resp = int(response_manager.last_response() - 1);
			
			if options[resp] == answer_expected then		# note to self: for this to work, it is _critical_ that buttons 1 & 2 are top and bottom left and 3 & 4 are top and bottom right, respectively!
				correct = 1;
			end;
		else
			delta = i_4AFC_Visual;
		end;
		
		array<string> data[17];
		data[1] = as_4AFC_Stimuli[i][2];
		data[2] = as_4AFC_Stimuli[i][3];
		data[3] = as_4AFC_Stimuli[i][1];
		data[4] = as_4AFC_Stimuli[i][4];
		data[5] = as_4AFC_Stimuli[i][5];
		data[6] = as_4AFC_Stimuli[i][6];
		data[7] = as_4AFC_Stimuli[i][7];
		data[8] = as_4AFC_Stimuli[i][8];
		data[9] = as_4AFC_Stimuli[i][9];
		data[10] = string(options[1]); # we are saving options presented + response as a sort of safety measure _should_ there ever be a problem with button assignments and we need to fix a systematic error in these data
		data[11] = string(options[2]);
		data[12] = string(options[3]);
		data[13] = string(options[4]);
		data[14] = string(correct);
		data[15] = string(resp);
		data[16] = string(delta);
		data[17] = string(i);
		SaveData(f_save, data);
		
		i_Total_Correct = i_Total_Correct + correct;
		
		
		wait_interval(i_4AFC_ITI + random(1, 250));
		
		i = i + 1;
	end;
	
	response_manager.set_button_active(1, true);
end;